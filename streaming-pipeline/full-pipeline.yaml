apiVersion: v1
kind: Namespace
metadata:
  name: streaming-pipeline
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: selfsigned-issuer
  namespace: streaming-pipeline
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kafka-ca
  namespace: streaming-pipeline
spec:
  isCA: true
  commonName: kafka-ca
  secretName: kafka-ca-tls
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: selfsigned-issuer
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kafka-cert
  namespace: streaming-pipeline
spec:
  secretName: kafka-certificates
  duration: 8760h
  renewBefore: 360h
  subject:
    organizations:
    - Kafka
  commonName: kafka
  isCA: false
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
    - server auth
    - client auth
  dnsNames:
  - kafka
  - kafka.streaming-pipeline.svc.cluster.local
  issuerRef:
    name: selfsigned-issuer
    kind: ClusterIssuer
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: kafka-ca-issuer
  namespace: streaming-pipeline
spec:
  ca:
    secretName: kafka-ca-tls
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kafka-0
  namespace: streaming-pipeline
spec:
  secretName: kafka-0-tls
  duration: 8760h # 1 year
  renewBefore: 360h # 15 days
  commonName: kafka-0
  dnsNames:
  - kafka-0
  - kafka-0.kafka-headless
  - kafka-0.kafka-headless.streaming-pipeline.svc.cluster.local
  - "*.kafka-headless.streaming-pipeline.svc.cluster.local"
  issuerRef:
    name: kafka-ca-issuer
    kind: Issuer
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kafka-1
  namespace: streaming-pipeline
spec:
  secretName: kafka-1-tls
  duration: 8760h
  renewBefore: 360h
  commonName: kafka-1
  dnsNames:
  - kafka-1
  - kafka-1.kafka-headless
  - kafka-1.kafka-headless.streaming-pipeline.svc.cluster.local
  - "*.kafka-headless.streaming-pipeline.svc.cluster.local"
  issuerRef:
    name: kafka-ca-issuer
    kind: Issuer
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kafka-2
  namespace: streaming-pipeline
spec:
  secretName: kafka-2-tls
  duration: 8760h
  renewBefore: 360h
  commonName: kafka-2
  dnsNames:
  - kafka-2
  - kafka-2.kafka-headless
  - kafka-2.kafka-headless.streaming-pipeline.svc.cluster.local
  - "*.kafka-headless.streaming-pipeline.svc.cluster.local"
  issuerRef:
    name: kafka-ca-issuer
    kind: Issuer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: streaming-pipeline
data:
  server.properties: |
    broker.id=${KAFKA_BROKER_ID}
    listeners=INTERNAL://:9092,EXTERNAL://:9093
    advertised.listeners=INTERNAL://kafka-${KAFKA_BROKER_ID}.kafka-headless.streaming-pipeline.svc.cluster.local:9092,EXTERNAL://kafka-${KAFKA_BROKER_ID}.kafka-headless.streaming-pipeline.svc.cluster.local:9093
    listener.security.protocol.map=INTERNAL:SSL,EXTERNAL:SSL
    inter.broker.listener.name=INTERNAL
    num.network.threads=3
    num.io.threads=8
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600
    log.dirs=/var/lib/kafka/data
    num.partitions=3
    num.recovery.threads.per.data.dir=1
    offsets.topic.replication.factor=3
    transaction.state.log.replication.factor=3
    transaction.state.log.min.isr=2
    log.retention.hours=168
    log.segment.bytes=1073741824
    log.retention.check.interval.ms=300000
    zookeeper.connect=zookeeper-service:2181
    zookeeper.connection.timeout.ms=18000
    group.initial.rebalance.delay.ms=0
    ssl.keystore.location=/tmp/keystore.jks
    ssl.keystore.password=changeit
    ssl.key.password=key-password
    ssl.truststore.location=/tmp/truststore.jks
    ssl.truststore.password=changeit
    ssl.client.auth=required
    ssl.endpoint.identification.algorithm=
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: streaming-pipeline
spec:
  clusterIP: None
  selector:
    app: kafka
  ports:
  - port: 9092
    name: internal
  - port: 9093
    name: external
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: streaming-pipeline
spec:
  serviceName: "kafka-headless"
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
      - name: create-keystore-truststore
        image: openjdk:8-jre
        command:
          - /bin/sh
          - -c
          - |
            # Set passwords for keystore and truststore
            KEYSTORE_PASSWORD="changeit"
            TRUSTSTORE_PASSWORD="changeit"
            
            # Create the Keystore using the broker certificate (tls.crt) and private key (tls.key)
            keytool -genkeypair -noprompt -alias kafka-broker -keyalg RSA -keystore /tmp/keystore.jks -storepass ${KEYSTORE_PASSWORD} -keypass ${KEYSTORE_PASSWORD} -dname "CN=kafka-broker" -file /opt/kafka/config/certs/tls.crt
            
            # Create the Truststore using the CA certificate (ca.crt)
            keytool -import -noprompt -alias kafka-ca -file /opt/kafka/config/certs/ca.crt -keystore /tmp/truststore.jks -storepass ${TRUSTSTORE_PASSWORD}
            
            # Verify the keystore and truststore have been created
            keytool -list -keystore /tmp/keystore.jks -storepass ${KEYSTORE_PASSWORD}
            keytool -list -keystore /tmp/truststore.jks -storepass ${TRUSTSTORE_PASSWORD}
        volumeMounts:
          - name: kafka-certs
            mountPath: /opt/kafka/config/certs
          - name: jks-stores
            mountPath: /tmp
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:6.2.0
        ports:
        - containerPort: 9092
          name: internal
        - containerPort: 9093
          name: external
        # command: [ "/bin/bash", "-c", "--" ]
        # args: [ "while true; do sleep 30; done;" ]
        env:
        - name: KAFKA_BROKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_OPTS
          value: "-Djavax.net.debug=all -Djdk.tls.rejectClientInitiatedRenegotiation=false"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-service:2181"
        - name: KAFKA_LOG_DIRS
          value: "/var/lib/kafka/data"
        - name: KAFKA_LISTENERS
          value: "INTERNAL://:9092,EXTERNAL://:9093"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "INTERNAL://$(POD_NAME).kafka-headless.streaming-pipeline.svc.cluster.local:9092,EXTERNAL://$(POD_NAME).kafka-headless.streaming-pipeline.svc.cluster.local:9093"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INTERNAL:SSL,EXTERNAL:SSL"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INTERNAL"
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka/data
        - name: kafka-config
          mountPath: /opt/kafka/config/server.properties
          subPath: server.properties
        - name: kafka-certs
          mountPath: /opt/kafka/config/certs
        - name: jks-stores
          mountPath: /tmp
      volumes:
      - name: kafka-config
        configMap:
          name: kafka-config
      - name: kafka-certs
        projected:
          sources:
          - secret:
              name: kafka-0-tls
          - secret:
              name: kafka-1-tls
          - secret:
              name: kafka-2-tls
      - name: jks-stores
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: streaming-pipeline
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:6.2.0
        ports:
        - containerPort: 2181
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: streaming-pipeline
spec:
  selector:
    app: zookeeper
  ports:
  - port: 2181
